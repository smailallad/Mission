<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query;

/**
 * PrestationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrestationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPrestations($sousProjet,$prestation,$startRow,$maxRows)
    {   
        $q = $this->createQueryBuilder('p');
        $q  ->select('p.id','p.nom')
            ->join('p.sousProjet','sp')
            ->addSelect('sp.nom as sousProjet');
        $q  ->where('p.sousProjet = :sousProjet');
        if ($prestation !== null)
        {
            $q  ->andWhere($q->expr()->like('p.nom', $q->expr()->literal('%'.$prestation.'%')));
        }
        $q  ->setFirstResult( $startRow )
            ->setMaxResults( $maxRows );
        $q  ->orderby('p.nom','ASC')
            ->setParameter('sousProjet', $sousProjet);
        return $q;
    }
    public function getTotalRows($sousProjet,$prestation)
    {   
        $q = $this->createQueryBuilder('p')
            ->select('count(p)')
            ->join('p.sousProjet','sp')
            ->where('p.sousProjet = :sousProjet');
            if ($prestation !== null)
            {
                $q  ->andWhere($q->expr()->like('p.nom', $q->expr()->literal('%'.$prestation.'%')));
            }
        $q  ->setParameter('sousProjet', $sousProjet);
        $q = $q->getQuery()->getResult(Query::HYDRATE_SINGLE_SCALAR);
        return $q;
    }
}
