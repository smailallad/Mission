<?php
namespace AppBundle\Repository;
/**
 * InterventionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterventionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getDestination($mission)
    {
        $q = $this->createQueryBuilder('i');
        $q  ->join('i.site','s')
            ->join('s.wilaya','w')
            ->addSelect("GROUP_CONCAT(DISTINCT w.nom SEPARATOR ', ') AS destination")
            //->addSelect('i.code')
            ->where('i.mission = :v1')
            //->where($q->expr()->eq($q->expr()->substring('m.code', 5,1),':v1'))
            ->setParameter('v1', $mission)
            ;
        $q = $q->getQuery()->getResult();
       
        return $q[0];
        /*$q = $this->createQueryBuilder('i');
        $q  ->join('i.mission','m')
            ->join('i.site','s')
            ->addSelect('m')
            ->addSelect('s')
            ->addSelect("GROUP_CONCAT(DISTINCT s.nom SEPARATOR ', ') AS destination")
            ->groupBy('i.mission')
            ->orderBy('m.code','ASC')
            ;
        return $q;*/
        //return $q->getQuery()->getResult();
        /*$q = $this->createQueryBuilder('location')
            ->select('location')
            ->addSelect("GROUP_CONCAT(DISTINCT location.name SEPARATOR '; ') AS locationNames");
        $result = $queryBuilder->getQuery()->getResult();*/
    }
    public function getInterventions($mission)
    {
        $q = $this->createQueryBuilder('i');
        $q  ->join('i.prestation','p')
            ->join('i.site','s')
            ->join('s.wilaya','w')
            ->join('p.sousProjet','sp')
            ->addSelect('p')
            ->addSelect('s')
            ->addSelect('w')
            ->addSelect('sp')
            ->where('i.mission = :v1')
            ->orderBy('i.dateIntervention','ASC')
            ->setParameter('v1',$mission)
            ;
        return $q->getQuery()->getResult();
    }
    
    public function getIntervention($intervention)
    {   
        $q = $this->createQueryBuilder('i');
        $q  ->join('i.prestation','p')
            ->join('i.site','s')
            ->join('s.wilaya','w')
            ->join('p.sousProjet','sp')
            ->addSelect('p')
            ->addSelect('s')
            ->addSelect('w')
            ->addSelect('sp')
            ->where('i.id = :v1')
            ->setParameter('v1',$intervention)
            ;
        $res = $q->getQuery()->getResult();
        if (count($res)>0)
        { return $res[0];}
        return $res;
    }
    
    public function getInterventionsAll()
    {
        $q = $this->createQueryBuilder('i');
        $q  ->join('i.prestation','p')
            ->join('i.site','s')
            ->join('i.mission','m')
            ->join('s.wilaya','w')
            ->join('p.sousProjet','sp')
            ->addSelect('p')
            ->addSelect('s')
            ->addSelect('w')
            ->addSelect('sp')
            ;
        return $q;
    }

    public function addFilterInterventionAll($q,$mission,$code,$site,$du,$au,$user)
    {   $and = false;
        
        if ($mission !== null){
            $q ->where($q->expr()->like('m.code', $q->expr()->literal($mission.'%')));
            $and = true;
        }

        if ($code !== null){
            if ($and){
                $q ->anWhere($q->expr()->like('s.code', $q->expr()->literal($code.'%')));
            }else{
                $q ->where($q->expr()->like('s.code', $q->expr()->literal($code.'%')));
                $and = true;
            }
        }
        if ($site !== null){
            if ($and){
                $q ->andWhere($q->expr()->like('s.nom', $q->expr()->literal($site.'%')));
            }else{
                $q ->where($q->expr()->like('s.nom', $q->expr()->literal($site.'%')));
                $and = true;
            }
        }

        if ($user !== null){
            if ($and){
                $q->andWhere('m.user =:user');
            }else{
                $q->where('m.user =:user');
                $and = true;
            }
            $q->setParameter('user',$user);
        }

        if ($du !== null){
            if ($and){
                $q->andWhere('i.dateIntervention >= :du');
            }else{
                $q->where('i.dateIntervention >= :du');
                $and = true;
            }
            $q->setParameter('du',$du);
        }

        if ($au !== null){
            if ($and){
                $q->andWhere('i.dateIntervention <= :au');
            }else{
                $q->where('i.dateIntervention <= :au');
                $and = true;
            }
            $q->setParameter('au',$au);
        }

        $q  ->orderBy('i.dateIntervention','DESC');
        return $q;
    }

    public function valideDate($mission,$depart,$retour){
        /*$q = $this->createQueryBuilder('i');
        $q  ->join('i.mission','m')
            ->addSelect('m')
            ->where('i.mission = :v1')
            ->andWhere($q->expr()->orX(
                'm.depart > i.dateIntervention',
                'm.retour < i.dateIntervention'
            ))
            ->setParameter('v1',$mission)
            ;
        $res = $q->getQuery()->getResult();
        if (count($res)>0)
        { return false;}
        return true;*/

        $q = $this->createQueryBuilder('i');
        $q  ->select($q->expr()->min('i.dateIntervention'))
            ->where('i.mission = :v1')
            ->andWhere('i.dateIntervention < :depart')
            ->setParameter('v1',$mission)
            ->setParameter('depart',$depart)
            ;
        $res = $q->getQuery()->getResult();

        $q = $this->createQueryBuilder('i');
        $q  ->select($q->expr()->max('i.dateIntervention'))
            ->where('i.mission = :v1')
            ->andWhere('i.dateIntervention > :retour')
            ->setParameter('v1',$mission)
            ->setParameter('retour',$retour)
            ;
        $res1 = $q->getQuery()->getResult();
        
        if ($res[0][1] !== null){
            $d1 = date_format(date_create($res[0][1]),'d/m/Y');
        }else {
            $d1 = null;
        }

        if ($res1[0][1] !== null){
            $d2 = date_format(date_create($res1[0][1]),'d/m/Y');
        }else {
            $d2 = null;
        }

        $ret = array("d1" => $d1,"d2" => $d2);
        return $ret;
        
    }

    function getIntervention2($depense){
        $q = $this->createQueryBuilder('i');
        //$q ->join('i.vehicule','v');
        //$q ->select('v');
        //$q  ->join('i.mission','m');
        //$q  ->addSelect('d');
        //$q  ->join('dm.justificationDepense','jd');
        //$q  ->addSelect('jd');
        $q  ->where('i.mission = :m');
        $q  ->andWhere('i.dateIntervention =  :d');

        //$q  ->orderby('dm.dateDep','ASC');
        $q  ->setParameter('m', $depense->getMission());
        $q  ->setParameter('d', $depense->getDateDep());
        return $q->getQuery()->getResult();

    }
    function getIntervention3($depense){
        $q = $this->createQueryBuilder('i');
        //$q ->join('i.vehicule','v');
        //$q ->select('v');
        //$q  ->join('i.mission','m');
        //$q  ->addSelect('d');
        //$q  ->join('dm.justificationDepense','jd');
        //$q  ->addSelect('jd');
        $q  ->where('i.mission = :m');
        //$q  ->andWhere('i.dateIntervention =  :d');

        //$q  ->orderby('dm.dateDep','ASC');
        $q  ->setParameter('m', $depense->getMission());
        //$q  ->setParameter('d', $depense->getDateDep());
        return $q->getQuery()->getResult();

    }
    
}
