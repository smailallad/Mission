<?php

namespace AppBundle\Repository;

/**
 * InterventionVehiculeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterventionVehiculeRepository extends \Doctrine\ORM\EntityRepository
{ 
    public function getNotInterventionEntretien($entretien, $intervention =null)
    {
     /*   $qb1 = $this->getEntityManager()->createQueryBuilder();
        $qb1    ->select('DISTINCT(ie.interventionVehicule)')
                ->from('AppBundle:InterventionEntretien', 'ie')
                ->where('ie.entretienVehicule = :v1')
                //->setParameter('v1',$entretien)
                ;

        //return $qb1;//->getQuery()->getResult(); 

        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $qb2    ->select('iv')
                ->from('AppBundle:InterventionVehicule', 'iv')
                //->where('u.active = true')
                //->andWhere('u.mission = true')
                ->where($qb1->expr()->notIn('iv', $qb1->getDQL()))
                ->orderBy('iv.designation')
                ->setParameter('v1',$entretien)
        ;
        //dump($qb2);
        //throw new \Exception('Message');
        return $qb2;
        //return $qb2->getQuery()->getResult();*/
        //dump($intervention);
        $qb1 = $this->getEntityManager()->createQueryBuilder();
        $qb1    ->select('DISTINCT(ie.interventionVehicule)')
                ->from('AppBundle:InterventionEntretien', 'ie')
                ->where('ie.entretienVehicule = :v1');
                if ($intervention <> null){
                    $qb1->andWhere('iv <> :v2');
                }

        //return $qb1;//->getQuery()->getResult(); 

        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $qb2    ->select('iv')
                ->from('AppBundle:InterventionVehicule', 'iv')
                //->where('u.active = true')
                //->andWhere('u.mission = true')
                ->where($qb1->expr()->notIn('iv', $qb1->getDQL()))
                ->orderBy('iv.designation')
                ->setParameter('v1',$entretien);
                if ($intervention <> null){
                    $qb2->setParameter('v2',$intervention);
                }
        //dump($qb2);
        //throw new \Exception('Message');
        return $qb2;
        //return $qb2->getQuery()->getResult();
       
    }
    public function getInterventionImportantes()
    {   
        /*$q = $this->createQueryBuilder('k');
        $q  ->select('k')
            ->join('k.marque','m')
            ->addSelect('m')
            ->join('k.interventionVehicule','i')
            ->addSelect('i');
        $q  ->where('i.important = 0');
        $q  ->orderby('i.designation','ASC');
        
        return $q->getQuery()->getResult();*/
        /*
        SELECT * 
        FROM intervention_vehicule 
        WHERE intervention_vehicule.important = 1
        and intervention_vehicule.id NOT IN 
        (
        SELECT DISTINCT(intervention_vehicule.id)
        FROM kms_intervention_vehicule,intervention_vehicule, marque 
        WHERE kms_intervention_vehicule.intervention_vehicule_id = intervention_vehicule.id 
        AND kms_intervention_vehicule.marque_id = marque.id 
        )
        
        $connection = $em->getConnection();

$statement = $connection->prepare("
    select c.prix-aggregates, t1.avg 
    from immobilier_ad_blank
    cross join (
        select avg(prix) as avg
        from immobilier_ad_blank
    ) t1
");

$statement->execute();

$results = $statement->fetchAll();


        */
        $connection = $this->_em->getConnection();

        $statement = $connection->prepare("
            SELECT * 
            FROM intervention_vehicule 
            CROSS JOIN marque
            WHERE important = 1
            AND (marque.active = true)
            AND (marque.id,intervention_vehicule.id) NOT IN(
                SELECT kms_intervention_vehicule.marque_id,kms_intervention_vehicule.intervention_vehicule_id
                FROM kms_intervention_vehicule
                ORDER BY kms_intervention_vehicule.marque_id,kms_intervention_vehicule.intervention_vehicule_id)
                
        ");

        $statement->execute();

        return $statement->fetchAll();

/*
        $q=$this->_em->createQuery(
            "SELECT i
            FROM AppBundle:InterventionVehicule i 
            WHERE i.important = 1
            AND i.id NOT IN (
                        SELECT DISTINCT(v)
                        FROM AppBundle:KmsInterventionVehicule k
                        JOIN k.interventionVehicule v
                        JOIN k.marque m 
                )
        ");

        return $q->getResult();
        */
    } 
}
