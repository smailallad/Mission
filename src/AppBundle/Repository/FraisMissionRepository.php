<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;

/**
 * FraisMissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FraisMissionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getFMs($mission,$ordre = null)
    {   
        $q = $this->createQueryBuilder('fm');
        $q  ->select('fm')
            ->join('fm.user','u')
            ->addSelect('u');
        $q  ->where('fm.mission = :mission');
        if ($ordre === null) {
            $q  ->orderby('fm.dateFm','ASC');
        }else{
            $q  ->orderby('u.nom','ASC');
            $q  ->addOrderby('fm.dateFm','ASC');
        }
        $q  ->setParameter('mission', $mission);
        return $q->getQuery()->getResult();
    }

    public function getMontantFmMissions($mission)
    {   
        $q = $this->createQueryBuilder('e')
        ->select('SUM(e.montant) AS total')
        ->where('e.mission = :mission')
        ->setParameter('mission',$mission);
        ;
        return $q->getQuery()->getResult()[0];
    }

    public function getTotalFM($t){   
        // t = M : Mission
        // t = C : Note de frais
        $q = $this->createQueryBuilder('f')
            ->join('f.mission','m')
            ->join('m.user','u')
            ->select('SUM(f.montant) AS total');
        $q  ->where($q->expr()->eq($q->expr()->substring('m.code', 5,1),':v1'));
        $q  ->setParameter('v1', $t);

        return $q;
    }

    public function addFilterTotalFM($q,$code,$depart,$retour,$user,$vEmploye,$vRollout,$vComptabilite){   
        
        if ($code !== null){
            $q->andWhere($q->expr()->like('m.code', $q->expr()->literal($code .'%')));
        }
        if ($depart !== null){
            $q->andWhere('m.depart >= :d1');
            $q->setParameter('d1',$depart);
        }
        if ($retour !== null){
            $q->andWhere('m.depart <= :d2');
            $q->setParameter('d2',$retour);
        }
        if ($user !== null){
            $q->andWhere('m.user = :user');
            $q->setParameter('user',$user);
        }
        if ($vEmploye !== null){
            $q->andWhere('m.vEmploye = :employe');
            $q->setParameter('employe',$vEmploye);
        }
        if ($vRollout !== null){
            $q->andWhere('m.vRollout = :rollout');
            $q->setParameter('rollout',$vRollout);
        }
        if ($vComptabilite !== null){
            $q->andWhere('m.vComptabilite = :comptabilite');
            $q->setParameter('comptabilite',$vComptabilite);
        }

        return $q;
    }

    function getTest(){
        /*
SELECT
    m.id,m.code,m.depart,m.retour,m.avance,m_dm,m_fm,(m_dm + m_fm) as total_depense,(m.avance - m_dm - m_fm) as solde
FROM mission m
LEFT JOIN (
    SELECT mission_id, SUM(montant) AS m_dm
    FROM depense_mission
    GROUP BY mission_id
    ) fm
    ON m.id = fm.mission_id
LEFT JOIN (
    SELECT mission_id, SUM(montant) AS m_fm
    FROM frais_mission
    GROUP BY mission_id
    ) md
    ON m.id = md.mission_id
        */
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
/*        $rsm->addEntityResult('AppBundle:Mission', 'm');
        //$rsm->addEntityResult('AppBundle:DepenseMission', 'dm');
        $rsm->addJoinedEntityResult('AppBundle:DepenseMission' , 'dm', 'mission', 'mission');
        $rsm->addFieldResult('mission', 'id', 'id');
        $rsm->addFieldResult('mission', 'code', 'code');
        $rsm->addFieldResult('mission', 'depart', 'depart');
        $rsm->addFieldResult('mission', 'retour', 'retour');
        $rsm->addFieldResult('mission', 'avance', 'avance');
        $rsm->addFieldResult('dm', 'm_dm', 'm_dm');

        $query = $em->createNativeQuery('   SELECT id,code,depart,retour,avance,m_dm
                                            FROM mission 
                                            LEFT JOIN (
                                            SELECT mission_id, SUM(montant) AS m_dm
                                            FROM depense_mission
                                            GROUP BY mission_id
                                            ) AS fm
                                            ON id = fm.mission_id
                                            WHERE id = ?', $rsm
                                            
                                        );
        $query->setParameter(1, 354);
*/
        $rsm->addEntityResult('AppBundle:Mission', 'm');
        $rsm->addEntityResult('AppBundle:User', 'u');
        $rsm->addJoinedEntityResult('AppBundle:User' , 'u', 'm', 'user');
        $rsm->addFieldResult('m', 'id', 'id');
        $rsm->addFieldResult('m', 'code', 'code');
        $rsm->addFieldResult('m', 'depart', 'depart');
        $rsm->addFieldResult('m', 'retour', 'retour');
        $rsm->addFieldResult('m', 'avance', 'avance');
        //$rsm->addFieldResult('u', 'username', 'username');
        $query = $em->createNativeQuery('   SELECT m.id,m.code,m.depart,m.retour,m.avance,aa.username
                                            FROM mission as m
                                            LEFT JOIN (SELECT u.id, u.username
                                            FROM user as u) as aa
                                            ON m.user_id = aa.id
                                            WHERE m.id = ?', $rsm);
        $query->setParameter(1, 354);
        dump($query);
        return $query->getResult();
    }
}
