<?php
namespace AppBundle\Repository;
use Doctrine\ORM\Query;
/**
 * SiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SiteRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSitess($client,$site,$startRow,$maxRows)
    {   
        $q = $this->createQueryBuilder('s');
        $q  ->select('s')
            ->join('s.client','c')
            ->join('s.wilaya','w');
            //->addSelect('c.nom as client');
        $q  ->where('s.client = :client');
        if ($site !== null)
        {
            $q  ->andWhere($q->expr()->orX(
                $q->expr()->like('s.code', $q->expr()->literal('%'.$site.'%')),
                $q->expr()->like('s.nom', $q->expr()->literal('%'.$site.'%'))));
        }
        
        $q  ->setFirstResult( $startRow )
            ->setMaxResults( $maxRows );
        $q  ->orderby('s.code','ASC')
            ->setParameter('client', $client);
        return $q;
    }
    public function getTotalRowsSiteClient($client,$site)
    {   
        $q = $this->createQueryBuilder('s')
            ->select('count(s)')
            ->join('s.client','c')
            ->where('s.client = :client');
            if ($site !== null)
            {
                $q  ->andWhere($q->expr()->orX(
                    $q->expr()->like('s.code', $q->expr()->literal('%'.$site.'%')),
                    $q->expr()->like('s.nom', $q->expr()->literal('%'.$site.'%'))));
            }
        $q  ->setParameter('client', $client);
        $q = $q->getQuery()->getResult(Query::HYDRATE_SINGLE_SCALAR);
        return $q;
    }
<<<<<<< HEAD
    public function getTotalRowsSiteClientZone($client,$site,$zone)
    {   
        $q = $this->createQueryBuilder('s')
            ->select('count(s)')
            ->join('s.client','c')
            ->join('s.wilaya','w')
            ->Where('w.zone = :zone')
            ->andwhere('s.client = :client');
            if ($site !== null)
            {
                $q  ->andWhere($q->expr()->orX(
                    $q->expr()->like('s.code', $q->expr()->literal('%'.$site.'%')),
                    $q->expr()->like('s.nom', $q->expr()->literal('%'.$site.'%'))));
            }
        $q  ->setParameter('client', $client);
        $q  ->setParameter('zone', $zone);
        $q = $q->getQuery()->getResult(Query::HYDRATE_SINGLE_SCALAR);
        return $q;
    }
=======
>>>>>>> c4c86e1f6dacdb75bcb034443d12a868987ff8f1

    public function getSitesClient($client)
    {   
        $q = $this->createQueryBuilder('s');
        $q  ->join('s.client','c')
<<<<<<< HEAD
            ->where('s.client = :client')
            ->setParameter('client', $client);
        return $q;
    }
    public function getSiteClientZone($client,$site,$zone,$startRow,$maxRows)
    {
        $q = $this->createQueryBuilder('s');
        $q  ->join('s.client','c')
            ->join('s.wilaya','w')
            //->join('w.zone','z')
            ->where('s.client = :client')
            ->andwhere('w.zone = :zone');
            if ($site !== null)
            {
                $q  ->andWhere($q->expr()->orX(
                    $q->expr()->like('s.code', $q->expr()->literal('%'.$site.'%')),
                    $q->expr()->like('s.nom', $q->expr()->literal('%'.$site.'%'))));
            }
        $q  ->setParameter('client', $client)
            ->setParameter('zone', $zone);
        
        $q  ->setFirstResult( $startRow )
            ->setMaxResults( $maxRows );
        $q  ->orderby('s.code','ASC');
        return $q;   
    }
=======
            ->andwhere('s.client = :client')
            ->setParameter('client', $client);
        return $q;
    }
>>>>>>> c4c86e1f6dacdb75bcb034443d12a868987ff8f1
}
